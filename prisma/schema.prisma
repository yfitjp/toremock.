// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  examAttempts  ExamAttempt[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String
  duration    Int      @default(60) // 分単位
  price       Int      @default(0)  // 円単位
  type        String   @default("TOEIC")
  difficulty  String   @default("中級")
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchases   Purchase[]
  attempts    ExamAttempt[]
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String
  examId          String
  paymentIntentId String?
  price           Int      @default(0)
  status          String   @default("pending")
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam            Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model ExamAttempt {
  id        String   @id @default(cuid())
  userId    String
  examId    String
  score     Int
  timeSpent Int      // 秒単位
  answers   String   // 回答データ（JSON文字列として保存）
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
}
